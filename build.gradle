plugins {
	id 'fabric-loom' version '1.3-SNAPSHOT'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

loom {
	mods {
		"lightest-lamps" {
			sourceSet sourceSets.main
		}
	}

	runs {
		//
		// This adds a new gradle task that runs the datagen API: "gradlew runDatagenClient"
		//
		datagenClient {
			inherit client
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=${modid}"

			runDir "build/datagen"
		}
	}
}

sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
	maven {
		name = "BuildCraft"
		url = "https://mod-buildcraft.com/maven"
	}
	maven {
		name = "dblsaiko"
		url = "https://maven.dblsaiko.net/"
	}
	// for reach entity attributes, required by Magna
	maven {
		url = "https://maven.jamieswhiteshirt.com/libs-release/"
		content {
			includeGroup "com.jamieswhiteshirt"
		}
	}
	maven {
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
		content {
			includeGroup 'io.github.ladysnake'
			includeGroupByRegex 'io\\.github\\.onyxstudios.*'
		}
	}
	maven {
		name = "Modmuss50"
		url = "https://maven.modmuss50.me/"
	}
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
	maven {
		name 'Jitpack'
		url 'https://jitpack.io'
		content {
			includeGroup "com.github.Technici4n"
			includeGroup "com.github.Draylar.omega-config"
		}
	}
	maven {
		name = "Technici4n"
		url = "https://raw.githubusercontent.com/Technici4n/Technici4n-maven/master/"
		content {
			includeGroup "net.fabricmc.fabric-api"
			includeGroup "dev.technici4n"
			includeGroup "dev.latvian.mods"
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered {
		mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
		mappings file("compat-mappings.tiny")
	}
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude group: "net.fabricmc.fabric-api"
	}

	modApi("dev.architectury:architectury-fabric:${rootProject.architectury_version}") // Fix refmap crash

	// Modmenu
	optionalDependency "com.terraformersmc:modmenu:${project.mod_menu_version}"

	optionalDependency "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
	//modRuntime "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"

	optionalDependency "TechReborn:TechReborn-1.20:${project.TechReborn_version}"

	include modApi("teamreborn:energy:${project.energy_version}") {
		exclude(group: "net.fabricmc.fabric-api")
		exclude group: "net.fabricmc", module: "fabric-loader"
	}

	include modImplementation("com.github.Technici4n:magna:${project.magna_version}") {
		exclude(group: "io.github.prospector")
		exclude(group: "me.shedaniel.cloth")
		exclude(group: "net.fabricmc.fabric-api")
	}

	modImplementation ("maven.modrinth:modern-industrialization:1.7.3") {
		exclude group: "net.fabricmc.fabric-api"
	}

	// Uncomment the following line to enable the deprecated Fabric API modules.
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
}

def optionalDependency(String dep) {
	dependencies.modLocalRuntime (dep) {
		exclude group: "net.fabricmc.fabric-api"
	}
	dependencies.modCompileOnly (dep) {
		exclude group: "net.fabricmc.fabric-api"
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

modrinth {
	token = System.getenv("MODRINTH_TOKEN") // This is the default. Remember to have the MODRINTH_TOKEN environment variable set or else this will fail, or set it to whatever you want - just make sure it stays private!
	projectId = "lightest-lamps" // This can be the project ID or the slug. Either will work!
	versionNumber = project.version // You don't need to set this manually. Will fail if Modrinth has this version already
	versionType = "release" // `release` is the default -- can also be `beta` or `alpha`
	uploadFile = remapJar // With Loom, this MUST be set to `remapJar` instead of `jar`!
	gameVersions = ["1.20.1"] // Must be an array, even with only one version
	loaders = ["fabric"] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
	dependencies { // A special DSL for creating dependencies
		// scope.type
		// The scope can be `required`, `optional`, `incompatible`, or `embedded`
		// The type can either be `project` or `version`
		optional.project "rei"
		required.project "cloth-config"
		required.project "fabric-api"
	}
}
